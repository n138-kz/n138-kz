name: GITHUB Action

on:
  workflow_dispatch:
    inputs:
      gh_actor_message:
        default: Test RUN
        required: true
        description: Actor message
        type: string
  workflow_call:

env:
  check_ok: true
  discord_avatar_url: https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png
  discord_username: Github-Actions
  discord_webhook_url: ${{ secrets.discord_webhook_url }}
  discord_content_color: 5793266
  github_actor_message: ""
  github_workflow_ref_name: ${{ github.workflow_ref }}

permissions:
  contents: read

jobs:
  check_var:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: env.discord_avatar_url
        if: ${{ env.discord_avatar_url == '' }}
        run: |
          echo '::error title=Error::Require and Has NOT Set:`discord_avatar_url`';
          echo 'check_ok=false' >> $GITHUB_ENV;
          exit 1

      - name: env.discord_username
        if: ${{ env.discord_username == '' }}
        run: |
          echo '::error title=Error::Require and Has NOT Set:`discord_username`';
          echo 'check_ok=false' >> $GITHUB_ENV;
          exit 1

      - name: env.discord_webhook_url
        if: ${{ env.discord_webhook_url == '' }}
        run: |
          echo '::error title=Error::Require and Has NOT Set:`discord_webhook_url`';
          echo 'check_ok=false' >> $GITHUB_ENV;
          exit 1

      - name: check ok?
        if: ${{ ! env.check_ok }}
        run: exit 1

  do_action:
    runs-on: ubuntu-latest
    needs: check_var
    steps:
      - uses: actions/checkout@v4

      - name: Actor message(type=workflow_dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          gh_actor_message='${{ inputs.gh_actor_message }}';
          gh_actor_message=$(echo ${gh_actor_message} | sed -e 's/"/\\"/g');
          echo 'github_actor_message='${gh_actor_message} >> $GITHUB_ENV;
          gh_actor_message=$(echo ${gh_actor_message} | sed -e 's/\\"/"/g');
          echo '::notice title=Actor message::'${gh_actor_message};

      - name: Actor message(type=push)
        if: ${{ github.event_name == 'push' }}
        run: |
          gh_actor_message='${{ toJSON(github.event.commits) }}';
          gh_actor_message=$(echo ${gh_actor_message} | jq -r .[0].message);
          gh_actor_message=${gh_actor_message%\\n*};
          gh_actor_message=$(echo ${gh_actor_message} | sed -e 's/"/\\"/g');
          echo 'github_actor_message='${gh_actor_message} >> $GITHUB_ENV;
          gh_actor_message=$(echo ${gh_actor_message} | sed -e 's/\\"/"/g');
          echo '::notice title=Actor message::'${gh_actor_message};
    
      - name: GITHUB Context
        run: |
          echo '{"env": [{"github": ${{ toJSON(github) }}}, {"secrets": ${{ toJSON(secrets) }}}]}' | jq | tee github-action-run_$(echo '${{ github.repository }}' | sed -e 's#/#_#g')_github-context.json;

      - name: GITHUB RestAPI /repos
        run: |
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }} | jq | tee github-action-run_$(echo '${{ github.repository }}' | sed -e 's#/#_#g')_github-repos.json;
    
      - name: workflow_ref
        run: |
          gh_workflow_ref='${{ github.workflow_ref }}';
          gh_workflow_ref=${gh_workflow_ref#*workflows/};
          gh_workflow_ref=${gh_workflow_ref%@*};
          echo 'github_workflow_ref_name='${gh_workflow_ref} >> $GITHUB_ENV;

      - name: Send Discord
        if: ${{ false }}
        run: |
          commit_sha='${{ github.sha }}0000000000'
          commit_sha_short=${commit_sha:0:7}
          payload_json='{}'
          payload_json=$(echo ${payload_json} | jq '.avatar_url|="${{ env.discord_avatar_url }}"')
          payload_json=$(echo ${payload_json} | jq '.username|="${{ env.discord_username }}"')
          payload_json=$(echo ${payload_json} | jq '.embeds|=[]')
          payload_json_embed0='{}'
          payload_json_embed0=$(echo ${payload_json_embed0} | jq '.title|="${{ github.repository }}@${{ github.ref_name }}"')
          payload_json_embed0=$(echo ${payload_json_embed0} | jq '.description|="```sh\ngit clone ${{ github.repository }}\n```\n"')
          payload_json_embed0=$(echo ${payload_json_embed0} | jq '.url|="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"')
          payload_json_embed0=$(echo ${payload_json_embed0} | jq '.color|="${{ env.discord_content_color }}"')
          payload_json_embed0=$(echo ${payload_json_embed0} | jq '.fields|=[]')
          payload_json_field0='{}'
          payload_json_field0=$(echo ${payload_json_field0} | jq '.inline|=false')
          payload_json_field0=$(echo ${payload_json_field0} | jq '.name|="Launched github action"')
          payload_json_field0=$(echo ${payload_json_field0} | jq '.value|=""')
          payload_json_embed0=$(echo ${payload_json_embed0} | jq ".fields |= .+[${payload_json_field0}]")
          payload_json_field0='{}'
          payload_json_field0=$(echo ${payload_json_field0} | jq '.inline|=true')
          payload_json_field0=$(echo ${payload_json_field0} | jq '.name|="Repository"')
          payload_json_field0=$(echo ${payload_json_field0} | jq '.value|="[${{ github.repository }}@${{ github.ref_name }}](${{ github.server_url }}/${{ github.repository }})"')
          payload_json_embed0=$(echo ${payload_json_embed0} | jq ".fields |= .+[${payload_json_field0}]")
          payload_json_field0='{}'
          payload_json_field0=$(echo ${payload_json_field0} | jq '.inline|=true')
          payload_json_field0=$(echo ${payload_json_field0} | jq '.name|="Workflow"')
          payload_json_field0=$(echo ${payload_json_field0} | jq '.value|="[${{ github.workflow }}#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"')
          payload_json_embed0=$(echo ${payload_json_embed0} | jq ".fields |= .+[${payload_json_field0}]")
          payload_json_field0='{}'
          payload_json_field0=$(echo ${payload_json_field0} | jq '.inline|=true')
          payload_json_field0=$(echo ${payload_json_field0} | jq '.name|="Actions"')
          tmp='[`'${commit_sha_short}'`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) ${{ env.github_actor_message }}'
          payload_json_field0=$(echo ${payload_json_field0} | jq --arg value_str "${tmp}" '.value = $value_str')
          payload_json_embed0=$(echo ${payload_json_embed0} | jq ".fields |= .+[${payload_json_field0}]")
          payload_json_field0='{}'
          payload_json_field0=$(echo ${payload_json_field0} | jq '.inline|=false')
          payload_json_field0=$(echo ${payload_json_field0} | jq '.name|=""')
          payload_json_field0=$(echo ${payload_json_field0} | jq '.value|=""')
          payload_json_embed0=$(echo ${payload_json_embed0} | jq ".fields |= .+[${payload_json_field0}]")
          payload_json=$(echo ${payload_json} | jq ".embeds |= .+[${payload_json_embed0}]")
          curl_files=''; i=0; for f in github-action-run*; do curl_files=${curl_files}" -F file[$i]=@${f}";i=$((i+1));done;
          curl -X POST \
            -H 'Content-Type:multipart/form-data' \
            -F 'payload_json='${payload_json} \
            ${curl_files} \
            ${{ env.discord_webhook_url }} | jq; \

      - name: Send Discord
        run: |
          commit_sha='${{ github.sha }}0000000000'
          commit_sha_short=${commit_sha:0:7}
          curl_files=''; i=0; for f in github-action-run*; do curl_files=${curl_files}" -F file[$i]=@${f}";i=$((i+1));done;
          curl -X POST \
            -H 'Content-Type:multipart/form-data' \
            -F 'payload_json={"avatar_url":"${{ env.discord_avatar_url }}","username":"${{ env.discord_username }}","embeds":[{"title":"${{ github.repository }}@${{ github.ref_name }}","description":"```sh\ngit clone ${{ github.repository }}\n```","url":"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}","color":${{ env.discord_content_color }},"fields":[{"name":"Launched github action","value":""},{"inline":true,"name":"Repository","value":"[${{ github.repository }}@${{ github.ref_name }}](${{ github.server_url }}/${{ github.repository }})"},{"inline":true,"name":"Workflow","value":"[${{ github.workflow }}#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"},{"inline":true,"name":"Actions","value":"[`'${commit_sha_short}'`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) ${{ env.github_actor_message }}"},{"name":"","value":""}]}]}' \
            ${curl_files} \
            ${{ env.discord_webhook_url }} | jq; \
